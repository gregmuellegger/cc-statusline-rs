name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-release:
    name: Build Release Binaries
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: statusline
            asset_name: statusline-linux-x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: statusline
            asset_name: statusline-linux-x86_64-musl
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: statusline
            asset_name: statusline-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: statusline
            asset_name: statusline-macos-aarch64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install musl tools (Linux musl only)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Strip binary (Linux and macOS)
        if: matrix.os != 'windows-latest'
        run: |
          strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

      - name: Create tarball
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ${{ matrix.asset_name }}-v${{ needs.create-release.outputs.version }}.tar.gz ${{ matrix.artifact_name }}
          mv ${{ matrix.asset_name }}-v${{ needs.create-release.outputs.version }}.tar.gz ../../..

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}-v${{ needs.create-release.outputs.version }}.tar.gz
          asset_name: ${{ matrix.asset_name }}-v${{ needs.create-release.outputs.version }}.tar.gz
          asset_content_type: application/gzip

      - name: Generate checksum
        run: |
          shasum -a 256 ${{ matrix.asset_name }}-v${{ needs.create-release.outputs.version }}.tar.gz > ${{ matrix.asset_name }}-v${{ needs.create-release.outputs.version }}.tar.gz.sha256

      - name: Upload Checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}-v${{ needs.create-release.outputs.version }}.tar.gz.sha256
          asset_name: ${{ matrix.asset_name }}-v${{ needs.create-release.outputs.version }}.tar.gz.sha256
          asset_content_type: text/plain
